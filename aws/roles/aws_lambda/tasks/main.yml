  - name: Create AAP application
    ansible.controller.application:
      name: "{{ bucket }}"
      description: "{{ bucket }} deployment"
      organization: "Default"
      state: present
      authorization_grant_type: password
      client_type: confidential

  - name: Get current tokens
    ansible.builtin.uri:
      url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/tokens/"
      method: GET
      force_basic_auth: yes
      body_format: json
      url_username: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
      url_password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
      return_content: yes
      status_code: 200
      validate_certs: no
    register: token_json

  - name: Delete token if already exists
    ansible.controller.token:
      existing_token_id: "{{ item.id | string }}"
      state: absent
    with_items: "{{ token_json.json.results }}"
    when: item.description == "{{ bucket }}"

  - name: Create a new AAP token
    ansible.controller.token:
      description: "{{ bucket }}"
      application: "{{ bucket }}"
      scope: "write"
      state: present
    register: aap_token

  - name: Check if VPC is present
    amazon.aws.ec2_vpc_net_info:
      filters:
        "tag:Name": "{{ bucket }}-vpc"
      region: "{{ region }}"
    register: vpc_info

  - name: Include VPC role to create infra for lambda
    ansible.builtin.include_role:
      name: zaskan.aws.aws_vpc
    when: vpc_info.vpcs | length == 0

  - name: Create a role and attach a managed policy
    community.aws.iam_role:
      name: lambdamonitoringrole
      assume_role_policy_document: "{{ lookup('file','policy.json') }}"
      managed_policies:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
    register: aws_lambda_role

  - name: Create maintenance flag
    community.aws.aws_ssm_parameter_store:
      name: "{{ bucket }}-maintenance"
      region: "{{ region }}"
      description: "Parameter to check maintenance for {{ bucket }} service"
      value: "yes"

  - name: Create lambda zip
    ansible.builtin.file:
      path: ./website_monitoring
      state: directory
      mode: '0755'
    delegate_to: localhost

  - name: Template lambda
    ansible.builtin.template:
      src: lambda_monitoring_and_remediation.py.j2
      dest: ./website_monitoring/index.py
    delegate_to: localhost

  - name: Create a bz2 archive of multiple files, rooted at /path
    community.general.archive:
      path: ./website_monitoring
      dest: ./lambda_monitoring_and_remediation.zip
      format: zip
    delegate_to: localhost

  - name: Create lambda
    community.aws.lambda:
      name: website_monitoring
      state: present
      region: "{{ region }}"
      zip_file: ./lambda_monitoring_and_remediation.zip
      runtime: 'python3.7'
      role: "{{ aws_lambda_role.iam_role.arn }}"
      handler: 'index.handler'
      vpc_subnet_ids:
      - "{{ localsubnet.subnet.id }}"
      - "{{ publicsubnet.subnet.id }}"
      vpc_security_group_ids:
      - "{{ sg.group_id }}"
      environment_variables:
        aaptoken: "{{ controller_token.token }}"
        hostname: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        job_id: "{{ jobid | string }}"
      tags:
        purpose: "{{ bucket }}"
    register: aws_lambda

  - name: Schedule lambda run
    community.aws.cloudwatchevent_rule:
      name: MyCronTask
      schedule_expression: "rate(1 minute)"
      description: "Run {{ aws_lambda.configuration.function_name }}"
      region: "{{ region }}"
      targets:
        - id: "{{ aws_lambda.configuration.function_name }}_scheduler"
          arn: "{{ aws_lambda.configuration.function_arn }}"
