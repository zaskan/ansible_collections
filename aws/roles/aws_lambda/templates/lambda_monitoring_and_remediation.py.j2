import ssl
import os
import json
import boto3
import urllib.request
from botocore.exceptions import ClientError

# Provide a URL to monitor

target = "http://{{ bucket }}.s3-website-eu-west-1.amazonaws.com/index.html"

# Following Env Vars must be created in Lambda config

token = os.environ['aaptoken'] # AAP Token
hostname = os.environ['hostname'] # AAP hostname
jobid = os.environ['job_id'] # AAP Job id to trigger when check fail

# Region must be passed from deployment playbook

ssm = boto3.client('ssm', region_name='{{ region }}')

path="/api/v2/job_templates/" + jobid + "/launch/" # AAP API Path

headers_data='{"Content-Type": "application/json","Authorization": "Bearer ' + token + '"}'

def handler(event, context):
    try:
        return lambda_handler(event, 200)
    except Exception as e:
        return lambda_handler('Error' + e.message, 400)
        
def lambda_handler(event, context):
    try:
      res = urllib.request.urlopen(urllib.request.Request(url=target, method='GET'),timeout=5,context=ssl.SSLContext())
    except:
      parameter = ssm.get_parameter(Name='{{ bucket }}-maintenance', WithDecryption=False)
      if parameter['Parameter']['Value'] == "no":
        try:
          res = urllib.request.urlopen(urllib.request.Request(
            url=hostname + path,
            headers=json.loads(headers_data),
            method='POST'),
            timeout=5,context=ssl.SSLContext())
            
        except:
          return("Cannot trigger remediation")
        else:
          try:  
            ssm.put_parameter(Name='{{ bucket }}-maintenance',Value='yes',Type='String',Overwrite=True)
          except:
            return("Cannot modify maintenance flag")
          else:
            return("Remediation Triggered")
      else:
        return('Maintenance mode')
    else:
      return ('Website is up and running')
