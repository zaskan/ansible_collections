  - name: Check and fail if name already exists
    ansible.builtin.uri:
      url: "https://{{ bucket }}.s3.amazonaws.com"
      method: GET
      status_code: 404
    ignore_errors: yes
    register: bucket_state

  - name: Notify when bucket exists
    ansible.builtin.pause:
      prompt: "Warning - {{ bucket }} already exists"
      seconds: 5
    when: bucket_state.status != 404

  - name: Create bucket
    amazon.aws.aws_s3:
      region: "{{ region }}"
      bucket: "{{ bucket }}"
      mode: create
      permission: public-read

  - name: Create policy template
    ansible.builtin.template:
      src: policy.j2
      dest: policy.json

  - name: Upload policy
    amazon.aws.s3_bucket:
      name: "{{ bucket }}"
      region: "{{ region }}"
      policy: "{{ lookup('file','policy.json') }}"

  - name: Create temporal directory
    ansible.builtin.file:
      path: tmp
      state: directory
    delegate_to: localhost

  - name: Download code from repository
    ansible.builtin.git:
      repo: "{{ repository }}" 
      dest: tmp

  - name: Get file names
    ansible.builtin.find:
      paths: tmp
      recurse: yes
    register: files

  - name: Upload website files
    amazon.aws.aws_s3:
      region: "{{ region }}"
      bucket: "{{ bucket }}"
      object: "{{ item.path | relpath('tmp') }}"
      src: "{{ item.path }}"
      mode: put
    when: item.path is not search("git")
    loop: "{{ files.files }}"

  - name: Activate website access
    community.aws.s3_website:
      region: "{{ region }}"
      name: "{{ bucket }}"
      state: present
    register: url

  - name: Clean template
    ansible.builtin.file:
      path: policy.json
      state: absent

  - name: Clean tmp
    ansible.builtin.file:
      path: tmp
      state: absent

  - name: Get site information
    amazon.aws.aws_s3:
      region: "{{ region }}"
      bucket: "{{ bucket }}"
      object: "index.html"
      mode: geturl 
    register: url

  - name: Show site URL
    debug:
      msg: "{{ url.url | urlsplit('scheme') }}://{{ url.url | urlsplit('hostname') }}{{ url.url | urlsplit('path') }}"
    register: target_url

  - name: Store URL
    set_stats:
      data:
        target_url: "{{ target_url }}"

  - name: Disabling maintenance flag
    community.aws.aws_ssm_parameter_store:
      name: "{{ bucket }}-maintenance"
      region: "{{ region }}"
      description: "Parameter to check maintenance for {{ bucket }} service"
      value: "no"

