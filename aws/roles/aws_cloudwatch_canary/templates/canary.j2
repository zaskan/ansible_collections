AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC with Managed NAT
Parameters:
  VPCName:
    Description: {{ bucket }}-vpc
    Type: String
    Default: VPC Public and Private with NAT
  CanaryName:
    Type: String
    Default: {{ bucket }}-canary
    MaxLength: 21
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public0:
      CIDR: 10.0.0.0/24
    Private0:
      CIDR: 10.0.2.0/24
  AZRegions:
    eu-west-1:
      AZs:
        - a
        - b
    eu-west-2:
      AZs:
        - a
        - b
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        'Fn::FindInMap':
          - SubnetConfig
          - VPC
          - CIDR
      Tags:
        - Key: Application
          Value:
            Ref: 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Ref VPCName
  PublicSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        'Fn::Sub':
          - '${AWS::Region}${AZ}'
          - AZ: !Select 
              - 0
              - !FindInMap 
                - AZRegions
                - !Ref 'AWS::Region'
                - AZs
      CidrBlock:
        'Fn::FindInMap':
          - SubnetConfig
          - Public0
          - CIDR
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Application
          Value:
            Ref: 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref VPCName
              - '-public-'
              - !Select 
                - 0
                - !FindInMap 
                  - AZRegions
                  - !Ref 'AWS::Region'
                  - AZs
  PrivateSubnet0:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        'Fn::Sub':
          - '${AWS::Region}${AZ}'
          - AZ: !Select 
              - 0
              - !FindInMap 
                - AZRegions
                - !Ref 'AWS::Region'
                - AZs
      CidrBlock:
        'Fn::FindInMap':
          - SubnetConfig
          - Private0
          - CIDR
      Tags:
        - Key: Application
          Value:
            Ref: 'AWS::StackName'
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref VPCName
              - '-private-'
              - !Select 
                - 0
                - !FindInMap 
                  - AZRegions
                  - !Ref 'AWS::Region'
                  - AZs
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value:
            Ref: 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref VPCName
              - '-IGW'
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value:
            Ref: 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref VPCName
              - '-public-route-table'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation0:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet0
      RouteTableId:
        Ref: PublicRouteTable
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Application
          Value:
            Ref: 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref VPCName
              - '-public-nacl'
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation0:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        Ref: PublicSubnet0
      NetworkAclId:
        Ref: PublicNetworkAcl
  ElasticIP0:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NATGateway0:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:
        'Fn::GetAtt':
          - ElasticIP0
          - AllocationId
      SubnetId:
        Ref: PublicSubnet0
  PrivateRouteTable0:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref VPCName
              - '-private-route-table-0'
  PrivateRouteToInternet0:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway0
  PrivateSubnetRouteTableAssociation0:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: PrivateSubnet0
      RouteTableId:
        Ref: PrivateRouteTable0
  CloudWatchSyntheticsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        'Fn::Sub': 'CloudWatchSyntheticsRole-${CanaryName}-${AWS::Region}'
      Description: CloudWatch Synthetics lambda execution role for running canaries
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition: {}
  RolePermissions:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
        - Ref: CloudWatchSyntheticsRole
      PolicyName:
        'Fn::Sub': 'CloudWatchSyntheticsPolicy-${CanaryName}-${AWS::Region}'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetBucketLocation'
            Resource:
              - 'Fn::Sub': 'arn:aws:s3:::{{ bucket }}-canary'
              - 'Fn::Sub': 'arn:aws:s3:::{{ bucket }}-canary/*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:CreateLogGroup'
            Resource:
              - 'Fn::Sub': >-
                  arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cwsyn-test-*
          - Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeInstances'
              - 'ec2:AttachNetworkInterface'
            Resource: '*'
          - Effect: Allow
            Resource: '*'
            Action: 'cloudwatch:PutMetricData'
            Condition:
              StringEquals:
                'cloudwatch:namespace': CloudWatchSynthetics

  Canary:
    Type: 'AWS::Synthetics::Canary'
    Properties:
      Name:
        'Fn::Sub': '${CanaryName}'
      Code:
        Handler: pageLoadBlueprint.handler
        Script: >
          from aws_synthetics.selenium import synthetics_webdriver as
          syn_webdriver

          from aws_synthetics.common import synthetics_logger as logger

          import os

          TAKE_SCREENSHOT = os.environ.get("TAKE_SCREENSHOT", "false")

          TARGET_URL = "https://{{ bucket }}.s3.amazonaws.com/index.html"

          def main():
              url = TARGET_URL
              browser = syn_webdriver.Chrome()
              browser.get(url)
              if TAKE_SCREENSHOT.lower() == "true":
                  browser.save_screenshot("loaded.png")
              response_code = syn_webdriver.get_http_response(url)
              if not response_code or response_code < 200 or response_code > 299:
                  raise Exception("Failed to load page!")
              logger.info("Canary successfully executed")
          def handler(event, context):
              # user defined log statements using synthetics_logger
              logger.info("Selenium Python heartbeat canary")
              return main()
      ExecutionRoleArn:
        'Fn::GetAtt':
          - CloudWatchSyntheticsRole
          - Arn
      RuntimeVersion: syn-python-selenium-1.3
      RunConfig:
        TimeoutInSeconds: 60
      ArtifactS3Location:
        'Fn::Join':
          - ''
          - - 's3://'
            - {{ bucket }}-canary
      StartCanaryAfterCreation: true
      DeleteLambdaResourcesOnCanaryDeletion: true
      Schedule:
        Expression: rate(1 minute)
        DurationInSeconds: 0
      SuccessRetentionPeriod: 90
      FailureRetentionPeriod: 180
      VPCConfig:
        VpcId:
          Ref: VPC
        SubnetIds:
          - Ref: PrivateSubnet0
          - Ref: PublicSubnet0
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
  RemediationLambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'

  IncidentReported:
    Type: AWS::SSM::Parameter
    Properties:
      Name: IncidentReported
      Type: String
      Value: no

  RemediationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt RemediationLambdaFunctionRole.Arn
      Handler: index.handler
      Environment:
        Variables: 
          aaptoken: {{ controller_token.token }}
          hostname: {{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}
          job_id: {{ jobid }}
      Code:
        ZipFile: |
          import urllib.request
          import ssl
          import os
          import json

          token = os.environ['aaptoken']
          hostname = os.environ['hostname']
          jobid = os.environ['job_id']
          path="/api/v2/job_templates/" + jobid + "/launch/"
          headers_data='{"Content-Type": "application/json","Authorization": "Bearer ' + token + '"}'

          def handler(event, context):
            res = urllib.request.urlopen(urllib.request.Request(
                  url=hostname + path,
                  headers=json.loads(headers_data),
                  method='POST'),
                  timeout=30,context=ssl.SSLContext())

            print(res.status, res.reason)
            print(json.loads(res.read()))

      Runtime: python3.7
      Timeout: 30
      TracingConfig:
        Mode: Active
      VpcConfig:
        SubnetIds:
          - Ref: PrivateSubnet0
          - Ref: PublicSubnet0
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
  EventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: EventRule
      EventPattern:
        source:
          - aws.synthetics
        detail:
          canary-name:
            - Ref: Canary
          test-run-status:
            - FAILED
      State: ENABLED
      Targets:
        - Arn: !Sub '${RemediationLambdaFunction.Arn}'
          Id: EventRule
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: RemediationLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - EventRule
          - Arn
Outputs:
  VPCId:
    Description: VPCId of VPC
    Value:
      Ref: VPC
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-VPC'
  PublicSubnet0:
    Description: SubnetId of public subnet 0
    Value:
      Ref: PublicSubnet0
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PublicSubnet0'
  PrivateSubnet0:
    Description: SubnetId of private subnet 0
    Value:
      Ref: PrivateSubnet0
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-PrivateSubnet0'
  DefaultSecurityGroup:
    Description: DefaultSecurityGroup Id
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup'
  CanaryRoleArn:
    Value:
      'Fn::GetAtt':
        - CloudWatchSyntheticsRole
        - Arn
