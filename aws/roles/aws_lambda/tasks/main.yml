  - name: Check and fail if name already exists
    ansible.builtin.uri:
      url: "https://{{ bucket }}.s3.amazonaws.com"
      method: GET
      status_code: 404
    ignore_errors: yes
    register: bucket_state

  - name: Notify when bucket exists
    ansible.builtin.pause:
      prompt: "Warning - {{ bucket }} already exists"
      seconds: 5
    when: bucket_state.status != 404
  
  - name: Create AAP application
    ansible.controller.application:
      name: "{{ bucket }}"
      description: "{{ bucket }} deployment"
      organization: "Default"
      state: present
      authorization_grant_type: password
      client_type: confidential

  - name: Get current tokens
    ansible.builtin.uri:
      url: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}/api/v2/tokens/"
      method: GET
      force_basic_auth: yes
      body_format: json
      url_username: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
      url_password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
      return_content: yes
      status_code: 200
      validate_certs: no
    register: token_json

  - name: Delete token if already exists
    ansible.controller.token:
      existing_token_id: "{{ item.id | string }}"
      state: absent
    with_items: "{{ token_json.json.results }}"
    when: item.description == "{{ bucket }}"

  - name: Create a new AAP token
    ansible.controller.token:
      description: "{{ bucket }}"
      application: "{{ bucket }}"
      scope: "write"
      state: present
    register: aap_token

  - name: Include VPC role to create infra for lambda
    ansible.builtin.include_role:
      name: zaskan.aws.aws_vpc

  - name: Create a role and attach a managed policy for lambda
    community.aws.iam_role:
      name: lambdamonitoringrole
      assume_role_policy_document: "{{ lookup('file','policy_lambda.json') }}"
      managed_policies:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
    register: aws_lambda_role

  - name: Create a role and attach a managed policy for event
    community.aws.iam_role:
      name: eventmonitoringrole
      assume_role_policy_document: "{{ lookup('file','policy_event.json') }}"
      managed_policies:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
    register: aws_event_role

  - name: Template lambda
    ansible.builtin.template:
      src: lambda_monitoring_and_remediation.py.j2
      dest: ./index.py
    delegate_to: localhost

  - name: Create a bz2 archive of multiple files, rooted at /path
    community.general.archive:
      path: ./index.py
      dest: ./website_monitoring.zip
      format: zip
    delegate_to: localhost

  - name: Create lambda
    community.aws.lambda:
      name: website_monitoring
      state: present
      region: "{{ region }}"
      zip_file: ./website_monitoring.zip
      runtime: 'python3.8'
      role: "{{ aws_lambda_role.iam_role.arn }}"
      handler: 'index.handler'
      vpc_subnet_ids:
      - "{{ localsubnet.subnet.id }}"
      - "{{ publicsubnet.subnet.id }}"
      vpc_security_group_ids:
      - "{{ sg.group_id }}"
      environment_variables:
        aaptoken: "{{ controller_token.token }}"
        hostname: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        job_id: "{{ jobid | string }}"
      timeout: 15
      memory_size: 512
      tags:
        purpose: "{{ bucket }}"
    register: aws_lambda

  - name: Schedule lambda 
    community.aws.cloudwatchevent_rule:
      name: "{{ bucket }}-monitoring-scheduler"
      schedule_expression: "rate(1 minute)"
      description: "Run {{ aws_lambda.configuration.function_name }}"
      region: "{{ region }}"
      role_arn: "{{ aws_event_role.iam_role.arn }}"
      targets:
        - id: "{{ aws_lambda.configuration.function_name }}_scheduler"
          arn: "{{ aws_lambda.configuration.function_arn }}"
    register: event

  - name: Create lambda policy
    community.aws.lambda_policy:
      state: present
      function_name: website_monitoring
      statement_id: "lambda-s3-{{ bucket }}"
      action: lambda:InvokeFunction
      principal: events.amazonaws.com
      region: "{{ region }}"
      #source_arn: "{{ event.rule.arn }}"
      source_arn: "{{ (event.rule.arn|regex_replace(event.rule.arn.split(':')[-1]))|regex_replace(':$','') }}"
    register: lambda_policy_action

  - name: Create maintenance flag
    community.aws.aws_ssm_parameter_store:
      name: "{{ bucket }}-maintenance"
      region: "{{ region }}"
      description: "Parameter to check maintenance for {{ bucket }} service"
      value: "no"

